{
    "collab_server" : "",
    "contents" : "#' Find the start date in the format of a character DateGroup using today's DateGroup as the starting point.\n#'\n#' The function sequences DateGroups from last date to today, incrementing by -1, and keeps the number of DateGroup units as specified by the user.\n#'\n#' @param msCalFrame is a data frame (non-sparse) of all dates and DateGroups, an output of \\code{createCalendarLikeMicrosoft} function\n#' @param yearSubGroup is a sub-group of a year, i.e. 'Week', 'Month', or 'Quarter'\n#' @param gappedFrame is a data.frame containing a Year and [yearSubGroup], as well as additional columns that are sparesely populated\n#' @param colsToAgg is a vector of character strings which specifies which variables should be used as arguments to {aggregate} the numerical column (functionCol)\n#' @param startDate is a character string, such as what is returned from the \\code{findStartDate} function\n#' @param functionCol is acharacter string indicating which variable of the gappedFrame should be aggregated, the variable should contain numeric values\n#' @param funToPerform is a character string specifying the function to pass to aggregate (options = 'sum','mean', etc.)\n#' @param sparseHandling is a numeric parameter than indicates how to handle sparse entries (i.e. DateGroups without entries) with options NA, 0, or 1\n#' @return a data frame that contains a DateGroup, colsToAgg, and a total of the functionCol for each DateGroup with the sparseHandling value for DateGroups not originally in the gappedFrame\n#' @author Aimie Faucett\n#' @details\n#' The function takes in msCalFrame, yearSubGroup, gappedFrame, colsToAgg, startDate, functionCol, funToPerform, and sparseHandling parameter and\n#' returns a data.frame that contains all DateGroups (per the msCalFrame), colsToAgg (e.g. 'Version', 'Key', 'RecordedValue'), functionCol\n#' (e.g. 'Record' with sparseHandling filled into sparse dates for each unique combo of colsToAgg).\n#' @export\n#' @importFrom stats aggregate\n\naggregateAndFillDateGroupGaps <- function(msCalFrame, yearSubGroup, gappedFrame, colsToAgg, startDate, functionCol, funToPerform, sparseHandling) {\n\n  baseFrame <- unique(msCalFrame[,c('Year', yearSubGroup, 'DateGroup')])\n  baseFrame <- baseFrame[baseFrame[,'DateGroup'] >= startDate, ]\n  gappedFrame[,'DateGroup'] <- ifelse(gappedFrame[,yearSubGroup] < 10,\n                                      paste(gappedFrame[,'Year'], gappedFrame[,yearSubGroup], sep='-0'),\n                                      paste(gappedFrame[,'Year'], gappedFrame[,yearSubGroup], sep='-'))\n\n  formulaString <- paste(functionCol, paste('DateGroup', paste(colsToAgg, collapse='+'), sep='+'), sep='~')\n  gappedFrame.agg <- with(gappedFrame[gappedFrame[,'DateGroup'] >= startDate, ], aggregate(as.formula(formulaString), FUN = funToPerform, na.rm = TRUE))\n\n  gappedFrame.agg[,'combocat'] <- do.call(paste, c(gappedFrame.agg[,colsToAgg], sep=','))\n  comboCats <- as.character(unique(gappedFrame.agg[,'combocat']))\n  crossJoined <- do.call(rbind, lapply(1:length(comboCats), function(x) cbind(merge(unique(baseFrame[,c('Year','DateGroup')]), gappedFrame.agg[gappedFrame.agg[,'combocat'] == comboCats[x], c('DateGroup','Record')], all.x=TRUE, by='DateGroup'), combocat = comboCats[x])))\n\n  decoded <- as.data.frame(sapply(1:3, function(x) do.call(rbind, strsplit(as.character(crossJoined[,'combocat']), split=','))[,x]))\n  colnames(decoded) <- colsToAgg\n\n  outFrame <- cbind(crossJoined[,c('DateGroup',functionCol)], decoded)\n  outFrame <- outFrame[,c('DateGroup', colsToAgg, functionCol)]\n\n  if(is.na(sparseHandling)) {\n\n    return(outFrame)\n  } else if(sparseHandling == 0) {\n\n    outFrame[is.na(outFrame[,functionCol]), functionCol] <- 0\n    return(outFrame)\n  } else if(sparseHandling == 1) {\n\n    outFrame[is.na(outFrame[,functionCol]), functionCol] <- 1\n    return(outFrame)\n  } else {\n\n    stop('The sparseHandling parameter was not recognized. The parameter should be NA, 0, or 1.')\n  }\n}\n",
    "created" : 1464728092942.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1682117118",
    "id" : "91086599",
    "lastKnownWriteTime" : 1464909617,
    "last_content_update" : 1464909617071,
    "path" : "~/dateManip/R/aggregateAndFillDateGroupGaps.R",
    "project_path" : "R/aggregateAndFillDateGroupGaps.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}