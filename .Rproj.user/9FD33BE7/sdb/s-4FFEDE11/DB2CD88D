{
    "collab_server" : "",
    "contents" : "#' Merge data frames with date-sparse data\n#'\n#' This function merges two data frames that are created using aggregateAndFillDataGroupGaps and creates a rate with roll capability and sparse entry handling.\n#'\n#' @param numFrame a sparse data frame created using the \\code{aggregateAndFillDateGroupGaps} function\n#' @param denomFrame a sparse data frame created using the \\code{aggregateAndFillDateGroupGaps} function\n#' @param mergeColsX a vector of character strings specifying which columns to use in the \\code{\\link[base]{merge}} function's by.x parameter\n#' @param mergeColsY a vector of character strings specifying which columns to use in the \\code{\\link[base]{merge}} function's by.y parameter\n#' @param numNumeric a character string that identifies which column of the numFrame contains the numeric value to use as the numerator in the rate calculation\n#' @param denomNumeric a character string that identifies which column of the denomFrame contains the numeric value to use as the denominator in the rate calculation\n#' @param sparseHandling a numeric (either NA or 0) that tells the function how to handle sparse Rate values after the merge\n#' @param rollPeriods a numeric (default = 0) that indicates the number of periods to include in the rolling rate (0, default, is not rolled)\n#' @return a data frame that contains the orginal columns in numFrame as well as a Rate that is calculated using the numNumeric/denomNumeric and adjusted using sparseHandling for DateGroups that are sparse in the numFrame\n#' @author Aimie Faucett\n#' @details\n#' This function takes a numFrame, denomFrame, mergeColsX, mergeColsY, numNumeric, denomNumeric, sparseHandling, rollPeriods, and lagPeriods. It\n#' returns a data.frame that contains a DateGroup, columns from numFrame (less the numNumeric column), and a Rate (either rolled or not with\n#' sparse entries handled as specified by the sparseHandling parameter). The rate is calculated by merging the numFrame and denomFrame by the\n#' mergeColsX and mergeColsY and then finding a rate for each unique combination of the merged columns.\n#' @export\n\nmergeCalSparseFrames <- function(numFrame, denomFrame, mergeColsX, mergeColsY, numNumeric, denomNumeric, sparseHandling, rollPeriods = 0) {\n\n  colnames(numFrame)[grep(paste('\\\\b',numNumeric,'\\\\b',sep=''), colnames(numFrame))] <- 'numRecord'\n  colnames(denomFrame)[grep(paste('\\\\b',denomNumeric,'\\\\b',sep=''), colnames(denomFrame))] <- 'denomRecord'\n\n  mrgFrame <- merge(numFrame, denomFrame[,c(mergeColsY, 'denomRecord')], by.x = mergeColsX, by.y = mergeColsY)\n\n  if(rollPeriods > 0) {\n\n    colsToAgg <- colnames(mrgFrame)[!(colnames(mrgFrame) %in% c('DateGroup','numRecord','denomRecord'))]\n    mrgFrame[,'combocat'] <- do.call(paste, c(mrgFrame[,colsToAgg], sep=','))\n    comboCats <- as.character(unique(mrgFrame[,'combocat']))\n\n    numRoll <- do.call(rbind, lapply(1:length(comboCats), function(x) cbind(DateGroup = as.character(unique(mrgFrame[,'DateGroup']))[rollPeriods:length(as.character(unique(mrgFrame[,'DateGroup'])))], combocat = comboCats[x], sapply(rollPeriods:length(as.character(unique(mrgFrame[mrgFrame[,'combocat'] == comboCats[x], 'DateGroup']))), function(y) ifelse(sum(is.na(mrgFrame[mrgFrame[,'combocat'] == comboCats[x], 'numRecord'][(y-(rollPeriods-1)):y])) == rollPeriods, NA, sum(mrgFrame[mrgFrame[,'combocat'] == comboCats[x], 'numRecord'][(y-(rollPeriods-1)):y], na.rm=TRUE))))))\n    denomRoll <- do.call(rbind, lapply(1:length(comboCats), function(x) cbind(DateGroup = as.character(unique(mrgFrame[,'DateGroup']))[rollPeriods:length(as.character(unique(mrgFrame[,'DateGroup'])))], combocat = comboCats[x], sapply(rollPeriods:length(as.character(unique(mrgFrame[mrgFrame[,'combocat'] == comboCats[x], 'DateGroup']))), function(y) ifelse(sum(is.na(mrgFrame[mrgFrame[,'combocat'] == comboCats[x], 'denomRecord'][(y-(rollPeriods-1)):y])) == rollPeriods, NA, sum(mrgFrame[mrgFrame[,'combocat'] == comboCats[x], 'denomRecord'][(y-(rollPeriods-1)):y], na.rm=TRUE))))))\n    rolled <- merge(numRoll, denomRoll, by=c('DateGroup','combocat'))\n\n    mrgFrame <- merge(mrgFrame, rolled, by=c('DateGroup','combocat'))\n    colnames(mrgFrame)[grep('V3', colnames(mrgFrame))] <- c('numRoll','denomRoll')\n    mrgFrame[,'numRoll'] <- as.numeric(as.character(mrgFrame[,'numRoll']))\n    mrgFrame[,'denomRoll'] <- as.numeric(as.character(mrgFrame[,'denomRoll']))\n    mrgFrame[,'Rate'] <- with(mrgFrame, numRoll/denomRoll)\n\n  } else if(rollPeriods == 0) {\n\n    mrgFrame[,'Rate'] <- with(mrgFrame, numRecord/denomRecord)\n  }else {\n\n    stop('The rollPeriods parameter entered is of the wrong class. The parameter must be a numeric integer.')\n  }\n\n  if(is.na(sparseHandling)) {\n\n    mrgFrame[is.nan(mrgFrame[,'Rate']),'Rate'] <- NA\n    mrgFrame[is.infinite(mrgFrame[,'Rate']),'Rate'] <- NA\n  } else if(sparseHandling == 0) {\n\n    mrgFrame[is.na(mrgFrame[,'Rate']),'Rate'] <- 0\n    mrgFrame[is.nan(mrgFrame[,'Rate']),'Rate'] <- 0\n    mrgFrame[is.infinite(mrgFrame[,'Rate']),'Rate'] <- 0\n\n  } else {\n\n    stop('The sparseHandling parameter is not specified correctly. It must be NA or 0.')\n  }\n\n  trimCols <- colnames(mrgFrame)[grep('combocat|num|denom', colnames(mrgFrame))]\n  mrgFrame <- mrgFrame[,!(colnames(mrgFrame) %in% trimCols)]\n  return(mrgFrame)\n}\n",
    "created" : 1464790633052.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "566719611",
    "id" : "DB2CD88D",
    "lastKnownWriteTime" : 1465236449,
    "last_content_update" : 1465236449399,
    "path" : "~/dateManip/R/mergeCalSparseFrames.R",
    "project_path" : "R/mergeCalSparseFrames.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}