{
    "collab_server" : "",
    "contents" : "#' Create a calendar with weeks that match what the WEEKNUM([Date]) and DATEPART(ww, [Date]) functions return in Excel and sQL, respectively.\n#'\n#' This function takes a starting year and a sub-group of year (i.e. week, month, quarter) and returns every date between that start year and today with a DateGroup.\n#'\n#' @param startYear is a numeric value that is a real year\n#' @param yearSubGroup is a sub-group of a year, i.e. 'Week', 'Month', or 'Quarter'\n#' @return a data frame of dates starting at Jan 1 of the startYear and ending today, which the corresponding year and DateGroup (e.g. 2015-01 for Week 1 of 2015 if yearSubGroup = 'Week')\n#' @author Aimie Faucett\n#' @details\n#' This function takes in a startYear and yearSubGroup and returns a data frame containing all the dates from the start of the startYear\n#' through today along with the year and yearSubGroup number. If the yearSubGroup is 'Week', then the function will return week numbers consistent\n#' with Microsoft's Excel WEEKNUM and SQL DATEPART(ww, ) functions.\n#' @export\n#' @importFrom lubridate month year\n\ncreateCalendarLikeMicrosoft <- function(startYear, yearSubGroup) {\n\n  thisYear <- year(Sys.Date())\n  datesToInclude <- data.frame(Date = do.call(c, lapply(startYear:thisYear, function(year) seq(as.Date(paste0(year,'/1/1')), as.Date(paste0(year,'/12/31')), 'day'))))\n  datesToInclude[,'Year'] <- year(datesToInclude[,'Date'])\n  datesToInclude <- datesToInclude[datesToInclude[,'Date'] <= Sys.Date(), ]\n\n  years <- as.character(unique(datesToInclude[,'Year']))\n\n  outFrame <- c()\n  for(i in 1:length(years)) {\n\n    subFrame <- datesToInclude[datesToInclude[,'Year'] == years[i], ]\n\n    if(yearSubGroup == 'Week') {\n\n      subFrame[,'DayOfWeek'] <- format(subFrame[,'Date'],'%w')\n      subFrame[,'Index'] <- seq(1, length(subFrame[,'Date']), 1)\n      cutBreaks <- which(subFrame[,'DayOfWeek'] == '0')\n\n      if(years[i] != thisYear) {\n\n        cutLabels <- seq(1, 53, 1)\n      } else {\n\n        upTo <- length(subFrame[subFrame[,'DayOfWeek'] == subFrame[subFrame[,'Index'] == max(subFrame[,'Index']), 'DayOfWeek'], 'Index']) + 1\n        cutLabels <- seq(1, upTo, 1)\n      }\n\n      if(min(cutBreaks) == 1) {\n\n        subFrame[,'Week'] <- cut(subFrame[,'Index'], breaks = c(cutBreaks, 366), include.lowest = TRUE, right = FALSE, labels = cutLabels)\n      } else {\n\n        if(length(levels(cut(subFrame[,'Index'], breaks = c(1, cutBreaks, 366)))) < length(cutLabels)) {\n\n          subFrame[,'Week'] <- cut(subFrame[,'Index'], breaks = c(1, cutBreaks, 366), include.lowest = TRUE, right = FALSE, labels = cutLabels[1:(length(cutLabels)-1)])\n        } else {\n\n          subFrame[,'Week'] <- cut(subFrame[,'Index'], breaks = c(1, cutBreaks, 366), include.lowest = TRUE, right = FALSE, labels = cutLabels)\n        }\n      }\n\n      subFrame[,'Week'] <- as.numeric(as.character(subFrame[,'Week']))\n      subFrame[,'DateGroup'] <- with(subFrame, ifelse(Week < 10, paste(Year, Week, sep='-0'), paste(Year, Week, sep='-')))\n    }\n\n    else if(yearSubGroup == 'Month') {\n\n      subFrame[,'Month'] <- month(subFrame[,'Date'])\n      subFrame[,'DateGroup'] <- with(subFrame, ifelse(Month < 10, paste(Year, Month, sep='-0'), paste(Year, Month, sep='-')))\n    }\n\n    else if(yearSubGroup == 'Quarter') {\n\n      subFrame[,'Month'] <- month(subFrame[,'Date'])\n      subFrame[,'Quarter'] <- with(subFrame, ifelse(Month < 4, 1,\n                                                    ifelse(Month < 7, 2,\n                                                           ifelse(Month < 10, 3, 4))))\n      subFrame[,'DateGroup'] <- with(subFrame, paste(Year, Quarter, sep='-0'))\n    }\n\n    else { stop('This function does not recognize the yearSubGroup parameter. It currently only takes one of \"Week\", \"Month\", or \"Quarter\".') }\n\n    outFrame <- rbind(outFrame, subFrame)\n  }\n\n  outFrame <- outFrame[,c('Date','Year',yearSubGroup,'DateGroup')]\n  return(outFrame)\n}\n",
    "created" : 1465412415280.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "303982023",
    "id" : "5CB48E42",
    "lastKnownWriteTime" : 1465570010,
    "last_content_update" : 1465570010979,
    "path" : "~/dateManip/R/createCalendarLikeMicrosoft.R",
    "project_path" : "R/createCalendarLikeMicrosoft.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}